/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IVeArtProxy {
  export type ConfigStruct = {
    _tokenId: BigNumberish;
    _balanceOf: BigNumberish;
    _lockedEnd: BigNumberish;
    _lockedAmount: BigNumberish;
    shape: BigNumberish;
    palette: BigNumberish;
    maxLines: BigNumberish;
    dash: BigNumberish;
    seed1: BigNumberish;
    seed2: BigNumberish;
    seed3: BigNumberish;
  };

  export type ConfigStructOutput = [
    _tokenId: bigint,
    _balanceOf: bigint,
    _lockedEnd: bigint,
    _lockedAmount: bigint,
    shape: bigint,
    palette: bigint,
    maxLines: bigint,
    dash: bigint,
    seed1: bigint,
    seed2: bigint,
    seed3: bigint
  ] & {
    _tokenId: bigint;
    _balanceOf: bigint;
    _lockedEnd: bigint;
    _lockedAmount: bigint;
    shape: bigint;
    palette: bigint;
    maxLines: bigint;
    dash: bigint;
    seed1: bigint;
    seed2: bigint;
    seed3: bigint;
  };

  export type PointStruct = { x: BigNumberish; y: BigNumberish };

  export type PointStructOutput = [x: bigint, y: bigint] & {
    x: bigint;
    y: bigint;
  };
}

export interface VeArtProxyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "circles"
      | "corners"
      | "curves"
      | "explosion"
      | "generateConfig"
      | "interlockingCircles"
      | "lineArtPathsOnly"
      | "spiral"
      | "tokenURI"
      | "twoStripes"
      | "ve"
      | "wormhole"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "circles",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "corners",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curves",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "explosion",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interlockingCircles",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lineArtPathsOnly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spiral",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "twoStripes",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wormhole",
    values: [IVeArtProxy.ConfigStruct, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "circles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "corners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curves", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "explosion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interlockingCircles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lineArtPathsOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spiral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twoStripes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wormhole", data: BytesLike): Result;
}

export interface VeArtProxy extends BaseContract {
  connect(runner?: ContractRunner | null): VeArtProxy;
  waitForDeployment(): Promise<this>;

  interface: VeArtProxyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  circles: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  corners: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  curves: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  explosion: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  generateConfig: TypedContractMethod<
    [_tokenId: BigNumberish],
    [IVeArtProxy.ConfigStructOutput],
    "view"
  >;

  interlockingCircles: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  lineArtPathsOnly: TypedContractMethod<
    [_tokenId: BigNumberish],
    [string],
    "view"
  >;

  spiral: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  twoStripes: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  ve: TypedContractMethod<[], [string], "view">;

  wormhole: TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "circles"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "corners"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "curves"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "explosion"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateConfig"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [IVeArtProxy.ConfigStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "interlockingCircles"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "lineArtPathsOnly"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "spiral"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "twoStripes"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;
  getFunction(nameOrSignature: "ve"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wormhole"
  ): TypedContractMethod<
    [cfg: IVeArtProxy.ConfigStruct, l: BigNumberish],
    [IVeArtProxy.PointStructOutput[]],
    "view"
  >;

  filters: {};
}
