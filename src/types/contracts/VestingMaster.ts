/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VestingMasterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLocker"
      | "claim"
      | "getLocker"
      | "getLockersCount"
      | "getVestingAmount"
      | "lock"
      | "lockedPeriodAmount"
      | "owner"
      | "period"
      | "removeLocker"
      | "renounceOwnership"
      | "totalLockedRewards"
      | "transferOwnership"
      | "userLockedRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Claim"
      | "Lock"
      | "LockerAdded"
      | "LockerRemoved"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addLocker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLocker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "lockedPeriodAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLocker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLockedRewards",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addLocker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLocker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedPeriodAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLockedRewards",
    data: BytesLike
  ): Result;
}

export namespace ClaimEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockerAddedEvent {
  export type InputTuple = [locker: AddressLike];
  export type OutputTuple = [locker: string];
  export interface OutputObject {
    locker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockerRemovedEvent {
  export type InputTuple = [locker: AddressLike];
  export type OutputTuple = [locker: string];
  export interface OutputObject {
    locker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VestingMaster extends BaseContract {
  connect(runner?: ContractRunner | null): VestingMaster;
  waitForDeployment(): Promise<this>;

  interface: VestingMasterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLocker: TypedContractMethod<[locker: AddressLike], [void], "nonpayable">;

  claim: TypedContractMethod<[], [boolean], "nonpayable">;

  getLocker: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getLockersCount: TypedContractMethod<[], [bigint], "view">;

  getVestingAmount: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { lockedAmount: bigint; claimableAmount: bigint }],
    "view"
  >;

  lock: TypedContractMethod<[account: AddressLike], [boolean], "payable">;

  lockedPeriodAmount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  period: TypedContractMethod<[], [bigint], "view">;

  removeLocker: TypedContractMethod<
    [locker: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalLockedRewards: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userLockedRewards: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { locked: bigint; timestamp: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLocker"
  ): TypedContractMethod<[locker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getLocker"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLockersCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingAmount"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { lockedAmount: bigint; claimableAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<[account: AddressLike], [boolean], "payable">;
  getFunction(
    nameOrSignature: "lockedPeriodAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeLocker"
  ): TypedContractMethod<[locker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalLockedRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userLockedRewards"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[bigint, bigint] & { locked: bigint; timestamp: bigint }],
    "view"
  >;

  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "Lock"
  ): TypedContractEvent<
    LockEvent.InputTuple,
    LockEvent.OutputTuple,
    LockEvent.OutputObject
  >;
  getEvent(
    key: "LockerAdded"
  ): TypedContractEvent<
    LockerAddedEvent.InputTuple,
    LockerAddedEvent.OutputTuple,
    LockerAddedEvent.OutputObject
  >;
  getEvent(
    key: "LockerRemoved"
  ): TypedContractEvent<
    LockerRemovedEvent.InputTuple,
    LockerRemovedEvent.OutputTuple,
    LockerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Claim(address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "Lock(address,uint256)": TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;
    Lock: TypedContractEvent<
      LockEvent.InputTuple,
      LockEvent.OutputTuple,
      LockEvent.OutputObject
    >;

    "LockerAdded(address)": TypedContractEvent<
      LockerAddedEvent.InputTuple,
      LockerAddedEvent.OutputTuple,
      LockerAddedEvent.OutputObject
    >;
    LockerAdded: TypedContractEvent<
      LockerAddedEvent.InputTuple,
      LockerAddedEvent.OutputTuple,
      LockerAddedEvent.OutputObject
    >;

    "LockerRemoved(address)": TypedContractEvent<
      LockerRemovedEvent.InputTuple,
      LockerRemovedEvent.OutputTuple,
      LockerRemovedEvent.OutputObject
    >;
    LockerRemoved: TypedContractEvent<
      LockerRemovedEvent.InputTuple,
      LockerRemovedEvent.OutputTuple,
      LockerRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
