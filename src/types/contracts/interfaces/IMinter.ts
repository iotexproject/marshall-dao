/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAXIMUM_TAIL_RATE"
      | "MAX_BPS"
      | "MINIMUM_TAIL_RATE"
      | "NUDGE"
      | "TAIL_START"
      | "WEEK"
      | "WEEKLY_DECAY"
      | "activePeriod"
      | "calculateGrowth"
      | "nudge"
      | "proposals"
      | "rewardsDistributor"
      | "tailEmissionRate"
      | "updatePeriod"
      | "ve"
      | "voter"
      | "weekly"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Mint" | "Nudge"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAXIMUM_TAIL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_BPS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_TAIL_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NUDGE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TAIL_START",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEEKLY_DECAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateGrowth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nudge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tailEmissionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(functionFragment: "weekly", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAXIMUM_TAIL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_BPS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_TAIL_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NUDGE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TAIL_START", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEEKLY_DECAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nudge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tailEmissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weekly", data: BytesLike): Result;
}

export namespace MintEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _weekly: BigNumberish,
    _circulating_supply: BigNumberish,
    _tail: boolean
  ];
  export type OutputTuple = [
    _sender: string,
    _weekly: bigint,
    _circulating_supply: bigint,
    _tail: boolean
  ];
  export interface OutputObject {
    _sender: string;
    _weekly: bigint;
    _circulating_supply: bigint;
    _tail: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NudgeEvent {
  export type InputTuple = [
    _period: BigNumberish,
    _oldRate: BigNumberish,
    _newRate: BigNumberish
  ];
  export type OutputTuple = [
    _period: bigint,
    _oldRate: bigint,
    _newRate: bigint
  ];
  export interface OutputObject {
    _period: bigint;
    _oldRate: bigint;
    _newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMinter extends BaseContract {
  connect(runner?: ContractRunner | null): IMinter;
  waitForDeployment(): Promise<this>;

  interface: IMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAXIMUM_TAIL_RATE: TypedContractMethod<[], [bigint], "view">;

  MAX_BPS: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_TAIL_RATE: TypedContractMethod<[], [bigint], "view">;

  NUDGE: TypedContractMethod<[], [bigint], "view">;

  TAIL_START: TypedContractMethod<[], [bigint], "view">;

  WEEK: TypedContractMethod<[], [bigint], "view">;

  WEEKLY_DECAY: TypedContractMethod<[], [bigint], "view">;

  activePeriod: TypedContractMethod<[], [bigint], "nonpayable">;

  calculateGrowth: TypedContractMethod<
    [_minted: BigNumberish],
    [bigint],
    "view"
  >;

  nudge: TypedContractMethod<[], [void], "nonpayable">;

  proposals: TypedContractMethod<
    [_activePeriod: BigNumberish],
    [boolean],
    "view"
  >;

  rewardsDistributor: TypedContractMethod<[], [string], "view">;

  tailEmissionRate: TypedContractMethod<[], [bigint], "view">;

  updatePeriod: TypedContractMethod<[], [bigint], "nonpayable">;

  ve: TypedContractMethod<[], [string], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  weekly: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAXIMUM_TAIL_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BPS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_TAIL_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NUDGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TAIL_START"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WEEKLY_DECAY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePeriod"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "calculateGrowth"
  ): TypedContractMethod<[_minted: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nudge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<[_activePeriod: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "rewardsDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tailEmissionRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updatePeriod"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(nameOrSignature: "ve"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weekly"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "Nudge"
  ): TypedContractEvent<
    NudgeEvent.InputTuple,
    NudgeEvent.OutputTuple,
    NudgeEvent.OutputObject
  >;

  filters: {
    "Mint(address,uint256,uint256,bool)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "Nudge(uint256,uint256,uint256)": TypedContractEvent<
      NudgeEvent.InputTuple,
      NudgeEvent.OutputTuple,
      NudgeEvent.OutputObject
    >;
    Nudge: TypedContractEvent<
      NudgeEvent.InputTuple,
      NudgeEvent.OutputTuple,
      NudgeEvent.OutputObject
    >;
  };
}
