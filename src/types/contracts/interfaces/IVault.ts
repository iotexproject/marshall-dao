/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WEEK"
      | "activePeriod"
      | "changeVeRate"
      | "changeWeekly"
      | "donate(address,uint256)"
      | "donate()"
      | "epochCount"
      | "governor"
      | "rewardsDistributor"
      | "setGovernor"
      | "updatePeriod"
      | "ve"
      | "veRate"
      | "voter"
      | "weekly"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Donation"
      | "Emission"
      | "GovernorChanged"
      | "VeRateChanged"
      | "WeeklyChanged"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeVeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeWeekly",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donate()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "veRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(functionFragment: "weekly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeVeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeWeekly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donate(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weekly", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DonationEvent {
  export type InputTuple = [
    donor: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [donor: string, token: string, amount: bigint];
  export interface OutputObject {
    donor: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmissionEvent {
  export type InputTuple = [sender: AddressLike, weekly: BigNumberish];
  export type OutputTuple = [sender: string, weekly: bigint];
  export interface OutputObject {
    sender: string;
    weekly: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorChangedEvent {
  export type InputTuple = [governor: AddressLike];
  export type OutputTuple = [governor: string];
  export interface OutputObject {
    governor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VeRateChangedEvent {
  export type InputTuple = [rate: BigNumberish];
  export type OutputTuple = [rate: bigint];
  export interface OutputObject {
    rate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyChangedEvent {
  export type InputTuple = [weekly: BigNumberish];
  export type OutputTuple = [weekly: bigint];
  export interface OutputObject {
    weekly: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    operator: AddressLike,
    token: AddressLike,
    recipcient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    token: string,
    recipcient: string,
    amount: bigint
  ];
  export interface OutputObject {
    operator: string;
    token: string;
    recipcient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVault extends BaseContract {
  connect(runner?: ContractRunner | null): IVault;
  waitForDeployment(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WEEK: TypedContractMethod<[], [bigint], "view">;

  activePeriod: TypedContractMethod<[], [bigint], "view">;

  changeVeRate: TypedContractMethod<
    [_rate: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeWeekly: TypedContractMethod<
    [_weekly: BigNumberish],
    [void],
    "nonpayable"
  >;

  "donate(address,uint256)": TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "donate()": TypedContractMethod<[], [void], "payable">;

  epochCount: TypedContractMethod<[], [bigint], "view">;

  governor: TypedContractMethod<[], [string], "view">;

  rewardsDistributor: TypedContractMethod<[], [string], "view">;

  setGovernor: TypedContractMethod<
    [_governor: AddressLike],
    [void],
    "nonpayable"
  >;

  updatePeriod: TypedContractMethod<[], [bigint], "nonpayable">;

  ve: TypedContractMethod<[], [string], "view">;

  veRate: TypedContractMethod<[], [bigint], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  weekly: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<
    [_token: AddressLike, _recipcient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WEEK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "activePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeVeRate"
  ): TypedContractMethod<[_rate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeWeekly"
  ): TypedContractMethod<[_weekly: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donate(address,uint256)"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "donate()"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "epochCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGovernor"
  ): TypedContractMethod<[_governor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePeriod"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(nameOrSignature: "ve"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "veRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "weekly"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_token: AddressLike, _recipcient: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Donation"
  ): TypedContractEvent<
    DonationEvent.InputTuple,
    DonationEvent.OutputTuple,
    DonationEvent.OutputObject
  >;
  getEvent(
    key: "Emission"
  ): TypedContractEvent<
    EmissionEvent.InputTuple,
    EmissionEvent.OutputTuple,
    EmissionEvent.OutputObject
  >;
  getEvent(
    key: "GovernorChanged"
  ): TypedContractEvent<
    GovernorChangedEvent.InputTuple,
    GovernorChangedEvent.OutputTuple,
    GovernorChangedEvent.OutputObject
  >;
  getEvent(
    key: "VeRateChanged"
  ): TypedContractEvent<
    VeRateChangedEvent.InputTuple,
    VeRateChangedEvent.OutputTuple,
    VeRateChangedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyChanged"
  ): TypedContractEvent<
    WeeklyChangedEvent.InputTuple,
    WeeklyChangedEvent.OutputTuple,
    WeeklyChangedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Donation(address,address,uint256)": TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;
    Donation: TypedContractEvent<
      DonationEvent.InputTuple,
      DonationEvent.OutputTuple,
      DonationEvent.OutputObject
    >;

    "Emission(address,uint256)": TypedContractEvent<
      EmissionEvent.InputTuple,
      EmissionEvent.OutputTuple,
      EmissionEvent.OutputObject
    >;
    Emission: TypedContractEvent<
      EmissionEvent.InputTuple,
      EmissionEvent.OutputTuple,
      EmissionEvent.OutputObject
    >;

    "GovernorChanged(address)": TypedContractEvent<
      GovernorChangedEvent.InputTuple,
      GovernorChangedEvent.OutputTuple,
      GovernorChangedEvent.OutputObject
    >;
    GovernorChanged: TypedContractEvent<
      GovernorChangedEvent.InputTuple,
      GovernorChangedEvent.OutputTuple,
      GovernorChangedEvent.OutputObject
    >;

    "VeRateChanged(uint256)": TypedContractEvent<
      VeRateChangedEvent.InputTuple,
      VeRateChangedEvent.OutputTuple,
      VeRateChangedEvent.OutputObject
    >;
    VeRateChanged: TypedContractEvent<
      VeRateChangedEvent.InputTuple,
      VeRateChangedEvent.OutputTuple,
      VeRateChangedEvent.OutputObject
    >;

    "WeeklyChanged(uint256)": TypedContractEvent<
      WeeklyChangedEvent.InputTuple,
      WeeklyChangedEvent.OutputTuple,
      WeeklyChangedEvent.OutputObject
    >;
    WeeklyChanged: TypedContractEvent<
      WeeklyChangedEvent.InputTuple,
      WeeklyChangedEvent.OutputTuple,
      WeeklyChangedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
