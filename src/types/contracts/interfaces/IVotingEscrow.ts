/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVotingEscrow {
  export type CheckpointStruct = {
    fromTimestamp: BigNumberish;
    owner: AddressLike;
    delegatedBalance: BigNumberish;
    delegatee: BigNumberish;
  };

  export type CheckpointStructOutput = [
    fromTimestamp: bigint,
    owner: string,
    delegatedBalance: bigint,
    delegatee: bigint
  ] & {
    fromTimestamp: bigint;
    owner: string;
    delegatedBalance: bigint;
    delegatee: bigint;
  };

  export type LockedBalanceStruct = {
    amount: BigNumberish;
    end: BigNumberish;
    isPermanent: boolean;
  };

  export type LockedBalanceStructOutput = [
    amount: bigint,
    end: bigint,
    isPermanent: boolean
  ] & { amount: bigint; end: bigint; isPermanent: boolean };

  export type GlobalPointStruct = {
    bias: BigNumberish;
    slope: BigNumberish;
    ts: BigNumberish;
    blk: BigNumberish;
    permanentLockBalance: BigNumberish;
  };

  export type GlobalPointStructOutput = [
    bias: bigint,
    slope: bigint,
    ts: bigint,
    blk: bigint,
    permanentLockBalance: bigint
  ] & {
    bias: bigint;
    slope: bigint;
    ts: bigint;
    blk: bigint;
    permanentLockBalance: bigint;
  };

  export type UserPointStruct = {
    bias: BigNumberish;
    slope: BigNumberish;
    ts: BigNumberish;
    blk: BigNumberish;
    permanent: BigNumberish;
  };

  export type UserPointStructOutput = [
    bias: bigint,
    slope: bigint,
    ts: bigint,
    blk: bigint,
    permanent: bigint
  ] & {
    bias: bigint;
    slope: bigint;
    ts: bigint;
    blk: bigint;
    permanent: bigint;
  };
}

export interface IVotingEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLOCK_MODE"
      | "admin"
      | "approve"
      | "approveNativeRoot"
      | "artProxy"
      | "balanceOf"
      | "balanceOfNFT"
      | "balanceOfNFTAt"
      | "canSplit"
      | "checkpoint"
      | "checkpoints"
      | "claimNative"
      | "clock"
      | "commitNativeRoot"
      | "createLock"
      | "createLockFor"
      | "decimals"
      | "delegate"
      | "delegateBySig"
      | "delegates"
      | "depositFor"
      | "epoch"
      | "forwarder"
      | "getApproved"
      | "getPastTotalSupply"
      | "getPastVotes"
      | "increaseAmount"
      | "increaseUnlockTime"
      | "isApprovedForAll"
      | "isApprovedOrOwner"
      | "lockPermanent"
      | "locked"
      | "lockedToken"
      | "merge"
      | "name"
      | "nativeRoot"
      | "nativeTokenId"
      | "nonces"
      | "numCheckpoints"
      | "ownerOf"
      | "ownerToNFTokenIdList"
      | "pendingNativeRoot"
      | "permanentLockBalance"
      | "pointHistory"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setAdmin"
      | "setApprovalForAll"
      | "setArtProxy"
      | "setTeam"
      | "setVoter"
      | "slopeChanges"
      | "split"
      | "supply"
      | "supportsInterface"
      | "symbol"
      | "team"
      | "toggleSplit"
      | "token"
      | "tokenId"
      | "tokenIdNative"
      | "tokenURI"
      | "totalSupply"
      | "totalSupplyAt"
      | "transferFrom"
      | "unlockPermanent"
      | "userPointEpoch"
      | "userPointHistory"
      | "version"
      | "voted"
      | "voter"
      | "voting"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "DelegateChanged"
      | "DelegateVotesChanged"
      | "Deposit"
      | "LockPermanent"
      | "Merge"
      | "MetadataUpdate"
      | "NativeRootApproved"
      | "NativeRootCommitted"
      | "NativeRootRejected"
      | "Split"
      | "Supply"
      | "Transfer"
      | "UnlockPermanent"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveNativeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "artProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNFTAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canSplit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNative",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitNativeRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockFor",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "forwarder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseUnlockTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedOrOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPermanent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nativeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToNFTokenIdList",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingNativeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permanentLockBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setArtProxy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slopeChanges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "split",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "supply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "team", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleSplit",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "token", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenIdNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPermanent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPointHistory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "voted", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voting",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveNativeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "artProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNFTAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canSplit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitNativeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLockFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forwarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedOrOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPermanent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nativeRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToNFTokenIdList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingNativeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permanentLockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setArtProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTeam", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "slopeChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "split", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "team", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPermanent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPointHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish
  ];
  export type OutputTuple = [_fromTokenId: bigint, _toTokenId: bigint];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateChangedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    fromDelegate: BigNumberish,
    toDelegate: BigNumberish
  ];
  export type OutputTuple = [
    delegator: string,
    fromDelegate: bigint,
    toDelegate: bigint
  ];
  export interface OutputObject {
    delegator: string;
    fromDelegate: bigint;
    toDelegate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateVotesChangedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    previousBalance: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    delegate: string,
    previousBalance: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    delegate: string;
    previousBalance: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    provider: AddressLike,
    tokenId: BigNumberish,
    depositType: BigNumberish,
    value: BigNumberish,
    locktime: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    tokenId: bigint,
    depositType: bigint,
    value: bigint,
    locktime: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    provider: string;
    tokenId: bigint;
    depositType: bigint;
    value: bigint;
    locktime: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockPermanentEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _tokenId: BigNumberish,
    amount: BigNumberish,
    _ts: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _tokenId: bigint,
    amount: bigint,
    _ts: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _tokenId: bigint;
    amount: bigint;
    _ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MergeEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _from: BigNumberish,
    _to: BigNumberish,
    _amountFrom: BigNumberish,
    _amountTo: BigNumberish,
    _amountFinal: BigNumberish,
    _locktime: BigNumberish,
    _ts: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _from: bigint,
    _to: bigint,
    _amountFrom: bigint,
    _amountTo: bigint,
    _amountFinal: bigint,
    _locktime: bigint,
    _ts: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _from: bigint;
    _to: bigint;
    _amountFrom: bigint;
    _amountTo: bigint;
    _amountFinal: bigint;
    _locktime: bigint;
    _ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateEvent {
  export type InputTuple = [_tokenId: BigNumberish];
  export type OutputTuple = [_tokenId: bigint];
  export interface OutputObject {
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeRootApprovedEvent {
  export type InputTuple = [_approver: AddressLike, _root: BytesLike];
  export type OutputTuple = [_approver: string, _root: string];
  export interface OutputObject {
    _approver: string;
    _root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeRootCommittedEvent {
  export type InputTuple = [_committer: AddressLike, _root: BytesLike];
  export type OutputTuple = [_committer: string, _root: string];
  export interface OutputObject {
    _committer: string;
    _root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NativeRootRejectedEvent {
  export type InputTuple = [_rejector: AddressLike, _root: BytesLike];
  export type OutputTuple = [_rejector: string, _root: string];
  export interface OutputObject {
    _rejector: string;
    _root: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitEvent {
  export type InputTuple = [
    _from: BigNumberish,
    _tokenId1: BigNumberish,
    _tokenId2: BigNumberish,
    _sender: AddressLike,
    _splitAmount1: BigNumberish,
    _splitAmount2: BigNumberish,
    _locktime: BigNumberish,
    _ts: BigNumberish
  ];
  export type OutputTuple = [
    _from: bigint,
    _tokenId1: bigint,
    _tokenId2: bigint,
    _sender: string,
    _splitAmount1: bigint,
    _splitAmount2: bigint,
    _locktime: bigint,
    _ts: bigint
  ];
  export interface OutputObject {
    _from: bigint;
    _tokenId1: bigint;
    _tokenId2: bigint;
    _sender: string;
    _splitAmount1: bigint;
    _splitAmount2: bigint;
    _locktime: bigint;
    _ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyEvent {
  export type InputTuple = [prevSupply: BigNumberish, supply: BigNumberish];
  export type OutputTuple = [prevSupply: bigint, supply: bigint];
  export interface OutputObject {
    prevSupply: bigint;
    supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnlockPermanentEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _tokenId: BigNumberish,
    amount: BigNumberish,
    _ts: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _tokenId: bigint,
    amount: bigint,
    _ts: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _tokenId: bigint;
    amount: bigint;
    _ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    provider: AddressLike,
    tokenId: BigNumberish,
    value: BigNumberish,
    ts: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    tokenId: bigint,
    value: bigint,
    ts: bigint
  ];
  export interface OutputObject {
    provider: string;
    tokenId: bigint;
    value: bigint;
    ts: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVotingEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): IVotingEscrow;
  waitForDeployment(): Promise<this>;

  interface: IVotingEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLOCK_MODE: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  approveNativeRoot: TypedContractMethod<[], [void], "nonpayable">;

  artProxy: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  balanceOfNFT: TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;

  balanceOfNFTAt: TypedContractMethod<
    [_tokenId: BigNumberish, _t: BigNumberish],
    [bigint],
    "view"
  >;

  canSplit: TypedContractMethod<[_account: AddressLike], [boolean], "view">;

  checkpoint: TypedContractMethod<[], [void], "nonpayable">;

  checkpoints: TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [IVotingEscrow.CheckpointStructOutput],
    "view"
  >;

  claimNative: TypedContractMethod<
    [
      _bucketId: BigNumberish,
      _voter: AddressLike,
      _end: BigNumberish,
      _amount: BigNumberish,
      proof: BytesLike[]
    ],
    [bigint],
    "nonpayable"
  >;

  clock: TypedContractMethod<[], [bigint], "view">;

  commitNativeRoot: TypedContractMethod<
    [_root: BytesLike],
    [void],
    "nonpayable"
  >;

  createLock: TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish, _lockDuration: BigNumberish],
    [bigint],
    "payable"
  >;

  createLockFor: TypedContractMethod<
    [
      _token: AddressLike,
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: AddressLike
    ],
    [bigint],
    "payable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  delegate: TypedContractMethod<
    [delegator: BigNumberish, delegatee: BigNumberish],
    [void],
    "nonpayable"
  >;

  delegateBySig: TypedContractMethod<
    [
      delegator: BigNumberish,
      delegatee: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  delegates: TypedContractMethod<[delegator: BigNumberish], [bigint], "view">;

  depositFor: TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "payable"
  >;

  epoch: TypedContractMethod<[], [bigint], "view">;

  forwarder: TypedContractMethod<[], [string], "view">;

  getApproved: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  getPastTotalSupply: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getPastVotes: TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  increaseAmount: TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "payable"
  >;

  increaseUnlockTime: TypedContractMethod<
    [_tokenId: BigNumberish, _lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedOrOwner: TypedContractMethod<
    [_spender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  lockPermanent: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  locked: TypedContractMethod<
    [_tokenId: BigNumberish],
    [IVotingEscrow.LockedBalanceStructOutput],
    "view"
  >;

  lockedToken: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  merge: TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nativeRoot: TypedContractMethod<[], [string], "view">;

  nativeTokenId: TypedContractMethod<
    [_bucketId: BigNumberish],
    [bigint],
    "view"
  >;

  nonces: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  numCheckpoints: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  ownerToNFTokenIdList: TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;

  pendingNativeRoot: TypedContractMethod<[], [string], "view">;

  permanentLockBalance: TypedContractMethod<[], [bigint], "view">;

  pointHistory: TypedContractMethod<
    [_loc: BigNumberish],
    [IVotingEscrow.GlobalPointStructOutput],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setArtProxy: TypedContractMethod<[_proxy: AddressLike], [void], "nonpayable">;

  setTeam: TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;

  setVoter: TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;

  slopeChanges: TypedContractMethod<
    [_timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  split: TypedContractMethod<
    [_from: BigNumberish, _amount: BigNumberish],
    [[bigint, bigint] & { _tokenId1: bigint; _tokenId2: bigint }],
    "nonpayable"
  >;

  supply: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [_interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  team: TypedContractMethod<[], [string], "view">;

  toggleSplit: TypedContractMethod<
    [_account: AddressLike, _bool: boolean],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[_token: AddressLike], [bigint], "view">;

  tokenId: TypedContractMethod<[], [bigint], "view">;

  tokenIdNative: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAt: TypedContractMethod<[_t: BigNumberish], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockPermanent: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  userPointEpoch: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  userPointHistory: TypedContractMethod<
    [_tokenId: BigNumberish, _loc: BigNumberish],
    [IVotingEscrow.UserPointStructOutput],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  voted: TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;

  voter: TypedContractMethod<[], [string], "view">;

  voting: TypedContractMethod<
    [_tokenId: BigNumberish, _voted: boolean],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLOCK_MODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveNativeRoot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "artProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfNFT"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfNFTAt"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _t: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "canSplit"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpoints"
  ): TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [IVotingEscrow.CheckpointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimNative"
  ): TypedContractMethod<
    [
      _bucketId: BigNumberish,
      _voter: AddressLike,
      _end: BigNumberish,
      _amount: BigNumberish,
      proof: BytesLike[]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "commitNativeRoot"
  ): TypedContractMethod<[_root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLock"
  ): TypedContractMethod<
    [_token: AddressLike, _value: BigNumberish, _lockDuration: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLockFor"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _value: BigNumberish,
      _lockDuration: BigNumberish,
      _to: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<
    [delegator: BigNumberish, delegatee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateBySig"
  ): TypedContractMethod<
    [
      delegator: BigNumberish,
      delegatee: BigNumberish,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegates"
  ): TypedContractMethod<[delegator: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositFor"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "forwarder"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPastTotalSupply"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPastVotes"
  ): TypedContractMethod<
    [account: AddressLike, tokenId: BigNumberish, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseAmount"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _value: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "increaseUnlockTime"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _lockDuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedOrOwner"
  ): TypedContractMethod<
    [_spender: AddressLike, _tokenId: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockPermanent"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<
    [_tokenId: BigNumberish],
    [IVotingEscrow.LockedBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedToken"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "merge"
  ): TypedContractMethod<
    [_from: BigNumberish, _to: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nativeTokenId"
  ): TypedContractMethod<[_bucketId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "numCheckpoints"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownerToNFTokenIdList"
  ): TypedContractMethod<
    [_owner: AddressLike, _index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingNativeRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permanentLockBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pointHistory"
  ): TypedContractMethod<
    [_loc: BigNumberish],
    [IVotingEscrow.GlobalPointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setArtProxy"
  ): TypedContractMethod<[_proxy: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTeam"
  ): TypedContractMethod<[_team: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVoter"
  ): TypedContractMethod<[_voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slopeChanges"
  ): TypedContractMethod<[_timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "split"
  ): TypedContractMethod<
    [_from: BigNumberish, _amount: BigNumberish],
    [[bigint, bigint] & { _tokenId1: bigint; _tokenId2: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[_interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "team"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleSplit"
  ): TypedContractMethod<
    [_account: AddressLike, _bool: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[_token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenIdNative"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAt"
  ): TypedContractMethod<[_t: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockPermanent"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPointEpoch"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "userPointHistory"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _loc: BigNumberish],
    [IVotingEscrow.UserPointStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voted"
  ): TypedContractMethod<[_tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "voter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voting"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _voted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "DelegateChanged"
  ): TypedContractEvent<
    DelegateChangedEvent.InputTuple,
    DelegateChangedEvent.OutputTuple,
    DelegateChangedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateVotesChanged"
  ): TypedContractEvent<
    DelegateVotesChangedEvent.InputTuple,
    DelegateVotesChangedEvent.OutputTuple,
    DelegateVotesChangedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "LockPermanent"
  ): TypedContractEvent<
    LockPermanentEvent.InputTuple,
    LockPermanentEvent.OutputTuple,
    LockPermanentEvent.OutputObject
  >;
  getEvent(
    key: "Merge"
  ): TypedContractEvent<
    MergeEvent.InputTuple,
    MergeEvent.OutputTuple,
    MergeEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdate"
  ): TypedContractEvent<
    MetadataUpdateEvent.InputTuple,
    MetadataUpdateEvent.OutputTuple,
    MetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "NativeRootApproved"
  ): TypedContractEvent<
    NativeRootApprovedEvent.InputTuple,
    NativeRootApprovedEvent.OutputTuple,
    NativeRootApprovedEvent.OutputObject
  >;
  getEvent(
    key: "NativeRootCommitted"
  ): TypedContractEvent<
    NativeRootCommittedEvent.InputTuple,
    NativeRootCommittedEvent.OutputTuple,
    NativeRootCommittedEvent.OutputObject
  >;
  getEvent(
    key: "NativeRootRejected"
  ): TypedContractEvent<
    NativeRootRejectedEvent.InputTuple,
    NativeRootRejectedEvent.OutputTuple,
    NativeRootRejectedEvent.OutputObject
  >;
  getEvent(
    key: "Split"
  ): TypedContractEvent<
    SplitEvent.InputTuple,
    SplitEvent.OutputTuple,
    SplitEvent.OutputObject
  >;
  getEvent(
    key: "Supply"
  ): TypedContractEvent<
    SupplyEvent.InputTuple,
    SupplyEvent.OutputTuple,
    SupplyEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UnlockPermanent"
  ): TypedContractEvent<
    UnlockPermanentEvent.InputTuple,
    UnlockPermanentEvent.OutputTuple,
    UnlockPermanentEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "DelegateChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;
    DelegateChanged: TypedContractEvent<
      DelegateChangedEvent.InputTuple,
      DelegateChangedEvent.OutputTuple,
      DelegateChangedEvent.OutputObject
    >;

    "DelegateVotesChanged(address,uint256,uint256)": TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;
    DelegateVotesChanged: TypedContractEvent<
      DelegateVotesChangedEvent.InputTuple,
      DelegateVotesChangedEvent.OutputTuple,
      DelegateVotesChangedEvent.OutputObject
    >;

    "Deposit(address,uint256,uint8,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "LockPermanent(address,uint256,uint256,uint256)": TypedContractEvent<
      LockPermanentEvent.InputTuple,
      LockPermanentEvent.OutputTuple,
      LockPermanentEvent.OutputObject
    >;
    LockPermanent: TypedContractEvent<
      LockPermanentEvent.InputTuple,
      LockPermanentEvent.OutputTuple,
      LockPermanentEvent.OutputObject
    >;

    "Merge(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      MergeEvent.InputTuple,
      MergeEvent.OutputTuple,
      MergeEvent.OutputObject
    >;
    Merge: TypedContractEvent<
      MergeEvent.InputTuple,
      MergeEvent.OutputTuple,
      MergeEvent.OutputObject
    >;

    "MetadataUpdate(uint256)": TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;
    MetadataUpdate: TypedContractEvent<
      MetadataUpdateEvent.InputTuple,
      MetadataUpdateEvent.OutputTuple,
      MetadataUpdateEvent.OutputObject
    >;

    "NativeRootApproved(address,bytes32)": TypedContractEvent<
      NativeRootApprovedEvent.InputTuple,
      NativeRootApprovedEvent.OutputTuple,
      NativeRootApprovedEvent.OutputObject
    >;
    NativeRootApproved: TypedContractEvent<
      NativeRootApprovedEvent.InputTuple,
      NativeRootApprovedEvent.OutputTuple,
      NativeRootApprovedEvent.OutputObject
    >;

    "NativeRootCommitted(address,bytes32)": TypedContractEvent<
      NativeRootCommittedEvent.InputTuple,
      NativeRootCommittedEvent.OutputTuple,
      NativeRootCommittedEvent.OutputObject
    >;
    NativeRootCommitted: TypedContractEvent<
      NativeRootCommittedEvent.InputTuple,
      NativeRootCommittedEvent.OutputTuple,
      NativeRootCommittedEvent.OutputObject
    >;

    "NativeRootRejected(address,bytes32)": TypedContractEvent<
      NativeRootRejectedEvent.InputTuple,
      NativeRootRejectedEvent.OutputTuple,
      NativeRootRejectedEvent.OutputObject
    >;
    NativeRootRejected: TypedContractEvent<
      NativeRootRejectedEvent.InputTuple,
      NativeRootRejectedEvent.OutputTuple,
      NativeRootRejectedEvent.OutputObject
    >;

    "Split(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;
    Split: TypedContractEvent<
      SplitEvent.InputTuple,
      SplitEvent.OutputTuple,
      SplitEvent.OutputObject
    >;

    "Supply(uint256,uint256)": TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;
    Supply: TypedContractEvent<
      SupplyEvent.InputTuple,
      SupplyEvent.OutputTuple,
      SupplyEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UnlockPermanent(address,uint256,uint256,uint256)": TypedContractEvent<
      UnlockPermanentEvent.InputTuple,
      UnlockPermanentEvent.OutputTuple,
      UnlockPermanentEvent.OutputObject
    >;
    UnlockPermanent: TypedContractEvent<
      UnlockPermanentEvent.InputTuple,
      UnlockPermanentEvent.OutputTuple,
      UnlockPermanentEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
