/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IFactoryRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "factoriesToPoolFactory"
      | "isPoolFactoryApproved"
      | "managedRewardsFactory"
      | "poolFactories"
      | "poolFactoriesLength"
      | "setManagedRewardsFactory"
      | "unapprove"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Approve" | "SetManagedRewardsFactory" | "Unapprove"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "factoriesToPoolFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolFactoryApproved",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managedRewardsFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactories",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolFactoriesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setManagedRewardsFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unapprove",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "factoriesToPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolFactoryApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managedRewardsFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolFactoriesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagedRewardsFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unapprove", data: BytesLike): Result;
}

export namespace ApproveEvent {
  export type InputTuple = [
    poolFactory: AddressLike,
    votingRewardsFactory: AddressLike,
    gaugeFactory: AddressLike
  ];
  export type OutputTuple = [
    poolFactory: string,
    votingRewardsFactory: string,
    gaugeFactory: string
  ];
  export interface OutputObject {
    poolFactory: string;
    votingRewardsFactory: string;
    gaugeFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetManagedRewardsFactoryEvent {
  export type InputTuple = [_newRewardsFactory: AddressLike];
  export type OutputTuple = [_newRewardsFactory: string];
  export interface OutputObject {
    _newRewardsFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnapproveEvent {
  export type InputTuple = [
    poolFactory: AddressLike,
    votingRewardsFactory: AddressLike,
    gaugeFactory: AddressLike
  ];
  export type OutputTuple = [
    poolFactory: string,
    votingRewardsFactory: string,
    gaugeFactory: string
  ];
  export interface OutputObject {
    poolFactory: string;
    votingRewardsFactory: string;
    gaugeFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFactoryRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IFactoryRegistry;
  waitForDeployment(): Promise<this>;

  interface: IFactoryRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [
      poolFactory: AddressLike,
      votingRewardsFactory: AddressLike,
      gaugeFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  factoriesToPoolFactory: TypedContractMethod<
    [poolFactory: AddressLike],
    [[string, string] & { votingRewardsFactory: string; gaugeFactory: string }],
    "view"
  >;

  isPoolFactoryApproved: TypedContractMethod<
    [poolFactory: AddressLike],
    [boolean],
    "view"
  >;

  managedRewardsFactory: TypedContractMethod<[], [string], "view">;

  poolFactories: TypedContractMethod<[], [string[]], "view">;

  poolFactoriesLength: TypedContractMethod<[], [bigint], "view">;

  setManagedRewardsFactory: TypedContractMethod<
    [_newManagedRewardsFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  unapprove: TypedContractMethod<
    [poolFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [
      poolFactory: AddressLike,
      votingRewardsFactory: AddressLike,
      gaugeFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "factoriesToPoolFactory"
  ): TypedContractMethod<
    [poolFactory: AddressLike],
    [[string, string] & { votingRewardsFactory: string; gaugeFactory: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPoolFactoryApproved"
  ): TypedContractMethod<[poolFactory: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "managedRewardsFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolFactories"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "poolFactoriesLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setManagedRewardsFactory"
  ): TypedContractMethod<
    [_newManagedRewardsFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unapprove"
  ): TypedContractMethod<[poolFactory: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approve"
  ): TypedContractEvent<
    ApproveEvent.InputTuple,
    ApproveEvent.OutputTuple,
    ApproveEvent.OutputObject
  >;
  getEvent(
    key: "SetManagedRewardsFactory"
  ): TypedContractEvent<
    SetManagedRewardsFactoryEvent.InputTuple,
    SetManagedRewardsFactoryEvent.OutputTuple,
    SetManagedRewardsFactoryEvent.OutputObject
  >;
  getEvent(
    key: "Unapprove"
  ): TypedContractEvent<
    UnapproveEvent.InputTuple,
    UnapproveEvent.OutputTuple,
    UnapproveEvent.OutputObject
  >;

  filters: {
    "Approve(address,address,address)": TypedContractEvent<
      ApproveEvent.InputTuple,
      ApproveEvent.OutputTuple,
      ApproveEvent.OutputObject
    >;
    Approve: TypedContractEvent<
      ApproveEvent.InputTuple,
      ApproveEvent.OutputTuple,
      ApproveEvent.OutputObject
    >;

    "SetManagedRewardsFactory(address)": TypedContractEvent<
      SetManagedRewardsFactoryEvent.InputTuple,
      SetManagedRewardsFactoryEvent.OutputTuple,
      SetManagedRewardsFactoryEvent.OutputObject
    >;
    SetManagedRewardsFactory: TypedContractEvent<
      SetManagedRewardsFactoryEvent.InputTuple,
      SetManagedRewardsFactoryEvent.OutputTuple,
      SetManagedRewardsFactoryEvent.OutputObject
    >;

    "Unapprove(address,address,address)": TypedContractEvent<
      UnapproveEvent.InputTuple,
      UnapproveEvent.OutputTuple,
      UnapproveEvent.OutputObject
    >;
    Unapprove: TypedContractEvent<
      UnapproveEvent.InputTuple,
      UnapproveEvent.OutputTuple,
      UnapproveEvent.OutputObject
    >;
  };
}
