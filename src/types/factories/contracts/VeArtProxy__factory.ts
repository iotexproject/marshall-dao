/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  VeArtProxy,
  VeArtProxyInterface,
} from "../../contracts/VeArtProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_ve",
        type: "address",
      },
      {
        internalType: "string",
        name: "_image",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "generateConfig",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "_tokenId",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "_balanceOf",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "_lockedEnd",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "_lockedAmount",
            type: "int256",
          },
        ],
        internalType: "struct IVeArtProxy.Config",
        name: "cfg",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "image",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "output",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ve",
    outputs: [
      {
        internalType: "contract IVotingEscrow",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type VeArtProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VeArtProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VeArtProxy__factory extends ContractFactory {
  constructor(...args: VeArtProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _ve: AddressLike,
    _image: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_ve, _image, overrides || {});
  }
  override deploy(
    _ve: AddressLike,
    _image: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_ve, _image, overrides || {}) as Promise<
      VeArtProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VeArtProxy__factory {
    return super.connect(runner) as VeArtProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VeArtProxyInterface {
    return new Interface(_abi) as VeArtProxyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): VeArtProxy {
    return new Contract(address, _abi, runner) as unknown as VeArtProxy;
  }
}
