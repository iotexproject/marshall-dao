/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFactoryRegistry,
  IFactoryRegistryInterface,
} from "../../../../contracts/interfaces/factories/IFactoryRegistry";

const _abi = [
  {
    inputs: [],
    name: "FallbackFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFactoriesToPoolFactory",
    type: "error",
  },
  {
    inputs: [],
    name: "PathAlreadyApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "PathNotApproved",
    type: "error",
  },
  {
    inputs: [],
    name: "SameAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "votingRewardsFactory",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "gaugeFactory",
        type: "address",
      },
    ],
    name: "Approve",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_newRewardsFactory",
        type: "address",
      },
    ],
    name: "SetManagedRewardsFactory",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "votingRewardsFactory",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "gaugeFactory",
        type: "address",
      },
    ],
    name: "Unapprove",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "votingRewardsFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "gaugeFactory",
        type: "address",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
    ],
    name: "factoriesToPoolFactory",
    outputs: [
      {
        internalType: "address",
        name: "votingRewardsFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "gaugeFactory",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
    ],
    name: "isPoolFactoryApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "managedRewardsFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFactories",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFactoriesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newManagedRewardsFactory",
        type: "address",
      },
    ],
    name: "setManagedRewardsFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "poolFactory",
        type: "address",
      },
    ],
    name: "unapprove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IFactoryRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IFactoryRegistryInterface {
    return new Interface(_abi) as IFactoryRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IFactoryRegistry {
    return new Contract(address, _abi, runner) as unknown as IFactoryRegistry;
  }
}
