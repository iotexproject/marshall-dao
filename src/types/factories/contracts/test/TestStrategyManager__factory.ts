/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestStrategyManager,
  TestStrategyManagerInterface,
} from "../../../contracts/test/TestStrategyManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "distributeRewards",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "recordShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_share",
        type: "uint256",
      },
    ],
    name: "setShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761019f908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806314b6ca9614610145578063a8031a1d14610109578063ce7c2ac2146100e2578063e70b9e271461008f5763fff1ee881461005657600080fd5b3461008b57602036600319011261008b5760209181906001600160a01b0361007c610177565b16815280845220549051908152f35b5080fd5b503461008b578060031936011261008b576100a8610177565b6001600160a01b0360243581811692908390036100de579160209491849316825260018552828220908252845220549051908152f35b8480fd5b503461008b57602036600319011261008b5760209181906001600160a01b0361007c610177565b508060031936011261008b576020916001600160a01b03610128610177565b168152600183528181203382528352816024359120555160018152f35b503461008b578060031936011261008b576001600160a01b03610166610177565b168252816020526024359082205580f35b600435906001600160a01b038216820361018d57565b600080fdfea164736f6c6343000813000a";

type TestStrategyManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStrategyManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStrategyManager__factory extends ContractFactory {
  constructor(...args: TestStrategyManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestStrategyManager & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): TestStrategyManager__factory {
    return super.connect(runner) as TestStrategyManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStrategyManagerInterface {
    return new Interface(_abi) as TestStrategyManagerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestStrategyManager {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as TestStrategyManager;
  }
}
